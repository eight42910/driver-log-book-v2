---
description:
globs:
alwaysApply: false
---
# 初学者向け出力ルール

## 基本方針

### 出力の目的
- 技術的な概念の理解促進
- 実装手順の明確化
- 学習ポイントの強調
- エラー解決のサポート

### 出力の原則
1. 段階的な説明
2. 具体例の提示
3. 視覚的な整理
4. 関連知識の補足

## 出力フォーマット

### 1. 技術概念の説明
```markdown
## 概念名

### 概要
- 簡潔な定義
- 主な用途
- 基本的な特徴

### 具体例
```typescript
// 実装例
const example = {
  // コメント付きのコード
};
```

### 学習ポイント
- 重要な理解ポイント
- よくある誤解
- 実践での注意点

### 関連知識
- 前提となる知識
- 発展的な学習項目
- 参考リソース
```

### 2. 実装手順の説明
```markdown
## 機能名の実装

### 1. 準備
- 必要なパッケージ
- 環境設定
- 前提条件

### 2. 実装ステップ
1. ステップ1の説明
   - 具体的な手順
   - 注意点
   - 確認ポイント

2. ステップ2の説明
   ...

### 3. 動作確認
- 確認項目
- テスト方法
- 期待される結果

### 4. トラブルシューティング
- よくある問題
- 解決方法
- 予防策
```

### 3. エラー解決の説明
```markdown
## エラー名

### エラーの概要
- エラーメッセージ
- 発生条件
- 影響範囲

### 原因
- 技術的な原因
- 実装上の問題
- 環境要因

### 解決手順
1. 手順1
2. 手順2
3. 手順3

### 予防策
- 再発防止の方法
- ベストプラクティス
- チェックリスト
```

## 出力の具体例

### コンポーネント実装の例
```markdown
## Buttonコンポーネントの実装

### 概要
- 再利用可能なボタンコンポーネント
- 様々なバリエーションに対応
- アクセシビリティ対応

### 実装手順
1. 基本構造の作成
```typescript
// Button.tsx
interface ButtonProps {
  variant: 'primary' | 'secondary';
  size: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Button = ({ variant, size, children }: ButtonProps) => {
  // 実装
};
```

### 学習ポイント
- TypeScriptの型定義
- Propsの設計
- コンポーネントの責務

### 関連知識
- Reactコンポーネント
- TypeScript
- アクセシビリティ
```

### エラー解決の例
```markdown
## "Cannot read property of undefined" エラー

### エラーの概要
- オブジェクトのプロパティにアクセスできない
- データが未定義の状態での操作

### 原因
- 非同期データの取得前のアクセス
- 初期値の未設定
- 型の不一致

### 解決手順
1. オプショナルチェイニングの使用
```typescript
// 修正前
const value = data.property;

// 修正後
const value = data?.property;
```

2. デフォルト値の設定
```typescript
const value = data?.property ?? defaultValue;
```

### 予防策
- 型定義の徹底
- 初期値の設定
- エラーハンドリングの実装
```

## 出力時の注意点

### 1. 初学者向けの配慮
- 専門用語の説明
- 段階的な説明
- 具体例の提示
- 視覚的な整理

### 2. 学習促進のポイント
- なぜその実装方法を選んだか
- 他の選択肢との比較
- 実践的な使用例
- 発展的な学習項目

### 3. エラー対応
- エラーの原因を明確に
- 解決手順を具体的に
- 再発防止の方法を提示
- 関連する知識の補足

### 4. コード品質
- 読みやすいコード
- 適切なコメント
- 型の活用
- ベストプラクティスの遵守
